# =================================================================
# Docker Compose Configuration for Section E Parser
# Digital Ocean Container Deployment
# =================================================================

version: '3.8'

services:
  sectionE-parser:
    build: 
      context: .
      dockerfile: Dockerfile
    image: sectionE-parser:latest
    container_name: sectionE-parser
    
    # Port mapping
    ports:
      - "8000:8000"
    
    # Environment variables (use .env file)
    env_file:
      - .env
    
    # Alternative: Environment variables (uncomment if not using .env file)
    # environment:
    #   - PORT=8000
    #   - NODE_ENV=production
    #   - PYTHON_ENV=production
    #   - SUPABASE_URL=${SUPABASE_URL}
    #   - SUPABASE_KEY=${SUPABASE_KEY}
    #   - OPENAI_API_KEY=${OPENAI_API_KEY}
    
    # Volume mounts for persistent data
    volumes:
      - ./data:/app/data
      - ./templates:/app/templates
      - app_logs:/app/logs
    
    # Restart policy
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits (adjust as needed)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network
    networks:
      - sectionE-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sectionE-nginx
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Mount SSL certificates if available
    
    depends_on:
      - sectionE-parser
    
    restart: unless-stopped
    
    networks:
      - sectionE-network
    
    # Uncomment if using nginx service
    # profiles:
    #   - nginx

  # Optional: PostgreSQL database (if not using Supabase)
  # postgres:
  #   image: postgres:14-alpine
  #   container_name: sectionE-postgres
  #   
  #   environment:
  #     POSTGRES_DB: sectionE_db
  #     POSTGRES_USER: sectionE_user
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./sql/supabase_schema_simple.sql:/docker-entrypoint-initdb.d/init.sql
  #   
  #   ports:
  #     - "5432:5432"
  #   
  #   restart: unless-stopped
  #   
  #   networks:
  #     - sectionE-network
  #   
  #   profiles:
  #     - database

volumes:
  app_logs:
    driver: local
  # postgres_data:
  #   driver: local

networks:
  sectionE-network:
    driver: bridge

# =================================================================
# Usage Instructions:
# =================================================================
# 
# Start all services:
#   docker-compose up -d
# 
# Start with specific profiles:
#   docker-compose --profile nginx up -d
#   docker-compose --profile database up -d
# 
# View logs:
#   docker-compose logs -f sectionE-parser
#   docker-compose logs -f
# 
# Stop services:
#   docker-compose down
# 
# Rebuild and restart:
#   docker-compose up -d --build
# 
# Scale the application (if needed):
#   docker-compose up -d --scale sectionE-parser=3
# 
# For production deployment:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# 
# ================================================================= 